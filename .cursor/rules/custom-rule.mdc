---
description: 
globs: 
---
# 股票分析工具开发规范

## 1. 项目结构
```
.
├── backend/               # 后端代码
│   ├── api/              # API 接口
│   ├── data/             # 数据管理
│   ├── engine/           # 策略引擎
│   ├── indicators/       # 技术指标
│   ├── scheduler/        # 调度器
│   ├── strategy/         # 策略管理
│   └── types/            # 类型定义
├── frontend/             # 前端代码
│   └── src/
│       ├── components/   # 组件
│       ├── pages/        # 页面
│       └── stores/       # 状态管理
├── filterLua/            # Lua策略脚本
└── app.go               # 主应用
```

## 2. 编码规范

### 2.1 Go 代码规范
- 使用 gofmt 格式化代码
- 错误处理使用 `error` 返回值
- 使用 context 进行超时控制
- API 接口需要添加错误重试机制
- 关键方法添加单元测试

### 2.2 Lua 策略脚本规范
- 必须包含元数据注释:
  ```lua
  -- @id: 策略ID
  -- @name: 策略名称
  -- @description: 策略描述
  ```
- 必须实现 `main()` 入口函数
- 使用 `log()` 函数记录关键信息
- 通过 `api` 对象调用系统功能

### 2.3 前端代码规范
- 使用 TypeScript 进行类型检查
- 组件使用 .svelte 后缀
- 状态管理使用 Svelte stores
- 使用 CSS 变量实现主题定制

## 3. 数据处理规范

### 3.1 股票数据缓存
- 使用 BuntDB 存储数据
- 缓存时间:
  - 5分钟数据: 5分钟
  - 日线数据: 1天
  - 基础信息: 1天

### 3.2 API 请求限制
- 单IP最大请求数: 500/秒
- 单个请求超时时间: 30秒
- 启用请求重试,最大重试次数: 3次

## 4. 策略开发规范

### 4.1 策略文件命名
- 使用小写字母和下划线
- 格式: `<功能>_<版本>.lua`
- 示例: `limit_up_break_v2.lua`

### 4.2 策略性能要求
- 单个股票处理时间 < 100ms
- 内存占用 < 100MB
- CPU使用率 < 50%

### 4.3 信号生成规范
- 包含必要字段:
  - 股票代码
  - 股票名称
  - 当前价格
  - 选股理由
  - 技术指标值

## 5. 用户界面规范

### 5.1 主题颜色
- 主色: #2563eb
- 成功: #10b981
- 警告: #f97316
- 错误: #ef4444

### 5.2 响应时间要求
- 页面加载 < 2秒
- 数据刷新 < 1秒
- 图表渲染 < 500ms

### 5.3 图表显示
- K线图使用 lightweight-charts
- 技术指标叠加在主图表
- 支持多时间周期切换

## 6. 错误处理规范

### 6.1 错误日志
- 记录错误堆栈
- 包含时间戳
- 错误级别分类

### 6.2 用户提示
- 使用 toast 显示错误信息
- 支持不同级别:
  - info: 普通提示
  - warning: 警告信息
  - error: 错误信息
  - fatal: 致命错误
```